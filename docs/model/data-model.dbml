
// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

enum application_state {
  draft [Note: 'Initial state; applicant able to modify application content.']
  
  institutional_rep_review [Note: "Awaiting confirmation from institutional representative."]

  dac_review
  dac_revisions_requested [Note: "DAC reviewer has requested changes. Applicant can modify and resubmit for review."]
  rejected [Note: "Rejected by DAC reviewer. No opportunity for revisions."]
  approved 

  closed [Note: "Closed by applicant."]
  revoked [Note: "Revoked by an admin after approval."]
}

enum file_type {
  signed_application
  ethics_letter
}

enum application_review_outcome {
  approved
  rejected
  revisions_requested
}

enum application_action {
  create
  withdraw
  close
  request_institutional_rep
  institutional_rep_approve
  institutional_rep_reject
  dac_review_approve
  dac_review_reject
  dac_review_revisions
  revoke
}

Table applications {
  id bigint [pk, increment]

  user_id varchar(100) [not null] // User ID set to a string since we don't have details atm about how this will be communicated. This will either be email address or a unique token from the auth system

  state application_state [not null]
  
  created_at timestamp [not null]
  
  approved_at timestamp
  expires_at timestamp
}


Table application_contents {
  Note: '''
    All fields here are nullable as this allows us to store partially complete
    applications as the user is working through the submission form.

    Validation rules for the application content needs to be implemented in the 
    software, not at the database level.
  '''

  application_id bigint [not null, ref: - applications.id]

	created_at timestamp [not null]
	updated_at timestamp [not null]

  applicant_first_name varchar(255)
  applicant_middle_name varchar(255)
  applicant_last_name varchar(255)
  applicant_title varchar(255)
  applicant_suffix varchar(255)
  applicant_position_title varchar(255)

  applicant_primary_affiliation varchar(500)
  applicant_institutional_email varchar(320) // emails addresses cannot be longer than 320

  applicant_profile_url text // no length restriciton on url, application should validate its properly formed url

	institutional_rep_title varchar(255)
	institutional_rep_first_name varchar(255)
  institutional_rep_middle_name varchar(255)
  institutional_rep_last_name varchar(255)
  institutional_rep_suffix varchar(255)
	institutional_rep_primary_affiliation varchar(255)
	institutional_rep_email varchar(255)
	institutional_rep_profile_url varchar(255)
	institutional_rep_position_title varchar(255)
	
  institution_country vachar(255)
  institution_state vachar(255)
  institution_city vachar(255)
  institution_street_address text
  institution_postal_code varchar(255) // postal codes globally may be longer, might as well not constrain it
  institution_building varchar(255)

  project_title text
  project_website text
  project_abstract text
  project_methodology text
  project_summary text
  project_publication_urls text[]

	//TODO: requested study information
	requested_studies text[]

  // TODO: need to store user agreement to terms

	ethics_review_required boolean
  ethics_letter bigint [ref: - files.id]

	dac_agreement_software_updates boolean [Note: "You will keep all computer systems on which PCGL Controlled Datea reside, or which provide accesss to such data, up-to-date with respect to software patches and antivirus file definitions (if applicable)."]
	dac_agreement_non_disclosure boolean [Note: "You will protect ICGC Controlled Data against disclosure to and use by unauthorized individuals."]
	dac_agreement_monitor_individual_access boolean [Note: "You will monitor and control which individuals have access to ICGC controlled Data."]
	dac_agreement_destroy_data boolean [Note: "You will securely destroy all copies of ICGC Controlled Data in accordance with the terms and conditions of the Data Access Agreement."]
	dac_agreement_familiarize_restrictions boolean [Note: "You will familiarixe all individuals who have access to ICGC Controlled Data with the restrictions on its use."]
	dac_agreement_provide_it_policy boolean [Note: "You agree to swiftly provide a copy of both your institutional and Research Project related IT policy documents upon request from a DACO representative."]
	dac_agreement_notify_unauthorized_access boolean [Note: "You will notify the DACO immediately if you become aware or suspect that someone has gained unauthorized access to the ICGC Controlled Data."]
	dac_agreement_certify_application boolean [Note: "You certify that the contents in the application are ture and correct to the best of your knowledge and belief."]
	dac_agreement_read_and_agreed boolean [Note: "You have read and agree to abide by the terms and conditions outlined in the Data Access Agreement."]

  signed_pdf bigint [ref: -files.id]
}

Table application_actions {
  id bigint [pk, increment]

  application_id bigint [not null, ref: <> applications.id]

  created_at timestamp [not null]

  user_id varchar(100) [not null]

  action application_action [not null]
  state_before varchar(255) [not null]
  state_after varchar(255) [not null]

  revisions_request_id bigint [ref: - revision_requests.id]

  // TODO: may need reference to a content diff
}

Table revision_requests {
  id bigint [pk, increment]
  application_id bigint [not null, ref: <> applications.id]

  created_at timestamp [not null]

  comments text

  applicant_approved boolean [not null]
  applicant_notes text

  institution_rep_approved boolean [not null]
  institution_rep_notes text

  collaborators_approved boolean [not null]
  collaborators_notes text

  project_approved boolean [not null]
  project_notes text

  requested_studies_approved boolean [not null]
  requested_studies_notes text
}

// TODO: Might need to track user agreements separate from the application content, This could model this
// Table agreements {
//   id bigint [not null]
//   user_id varchar(100) [not null]
//   name text [not null]
//   agreement_text text [not null]

//   agreement_type agreement_type [not null] // enum, need to review possible agreements needed
//   agreed_at timestamp [not null] // with timezone, seconds precision = 0
// }


Table collaborators {
  id bigint [pk, increment]
  application_id bigint [ref: - applications.id] 

  first_name varchar(255) [not null]
  middle_name varchar(255)
  last_name varchar(255) [not null]
  title varchar(255)
  suffix varchar(255)
  position_title varchar(255) [not null]
  institutional_email varchar(320) [not null]
  profile_url text

  // TODO: need email? how do we connect this 
}

Table files {
  id bigint [pk, increment]
  
  application_id bigint [not null, ref: <> applications.id]

  type file_type [not null]

  submitter_user_id varchar(100) [not null]
  submitted_at timestamp [not null]

  content bytea [not null]
  filename varchar(255)

}